{"version":3,"sources":["components/EmployeeAnalyses/EmployeeAnalyses.tsx","helpers/employeeHelper.ts","components/EmployeeTable/EmployeeTable.tsx","components/EmployeeTally/EmployeeTally.tsx","services/employeeService/employeeService.ts","App.tsx","reportWebVitals.ts","index.tsx","components/EmployeeTally/EmployeeTally.module.scss"],"names":["EmployeeAnalyses","analyses","className","Object","entries","map","key","value","getHighestEarningEmployee","employees","employee","last","orderBy","fullName","salary","formatCurrency","getMostRecentlyJoinedEmployee","dateJoined","formatDate","Intl","NumberFormat","style","currency","format","date","formatISO","representation","ChevronDownIcon","inverse","classnames","xmlns","width","height","fill","viewBox","fillRule","d","EmployeeTable","toggleDateJoinedOrder","useState","setInverse","handleDateJoinedHeaderClick","useCallback","scope","onClick","textAlign","employeeId","PersonIcon","styles","icon","EmployeeTally","tally","EmployeeService","getEmployees","_employees","firstname","lastname","parse","Date","now","DESC","App","dateJoinedOrder","setDateJoinedOrder","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.dd34126b.chunk.js","sourcesContent":["import React from 'react';\n\ninterface EmployeeAnalysesProps {\n  analyses: { [key: string]: string };\n}\n\nexport default function EmployeeAnalyses({ analyses }: EmployeeAnalysesProps) {\n  return (\n    <div className=\"employee-analyses d-flex align-items-start align-items-md-end flex-column pt-3 pt-sm-0\">\n      {Object.entries(analyses).map(([key, value]) => (\n        <div key={key} className=\"employee-analysis\">\n          {key}: <strong>{value}</strong>\n        </div>\n      ))}\n    </div>\n  );\n}\n","import { formatISO } from 'date-fns';\nimport { last, orderBy } from 'lodash';\n\nexport function getHighestEarningEmployee(employees: Employee[]) {\n  const employee = last(orderBy(employees, ['salary'], ['asc']));\n\n  if (employee) {\n    const { fullName, salary } = employee;\n    return `${fullName} (${formatCurrency(salary)})`;\n  }\n\n  return '';\n}\n\nexport function getMostRecentlyJoinedEmployee(employees: Employee[]) {\n  const employee = last(orderBy(employees, ['dateJoined'], ['asc']));\n\n  if (employee) {\n    const { fullName, dateJoined } = employee;\n    return `${fullName} (${formatDate(dateJoined)})`;\n  }\n\n  return '';\n}\n\nexport function formatCurrency(value: number) {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'MYR',\n  }).format(value);\n}\n\nexport function formatDate(date: Date) {\n  return formatISO(date, { representation: 'date' });\n}\n","import classnames from 'classnames';\nimport { formatCurrency, formatDate } from 'helpers/employeeHelper';\nimport React, { useCallback, useState } from 'react';\nimport './EmployeeTable.scss';\n\ninterface EmployeeTableProps {\n  employees: Employee[];\n  toggleDateJoinedOrder: () => void;\n}\n\nfunction ChevronDownIcon({ inverse }: { inverse: boolean }) {\n  const className = classnames('bi bi-chevron-down order-icon', {\n    inverse: inverse,\n  });\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      className={className}\n      viewBox=\"0 0 16 16\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z\"\n      />\n    </svg>\n  );\n}\n\nexport default function EmployeeTable({\n  employees,\n  toggleDateJoinedOrder,\n}: EmployeeTableProps) {\n  const [inverse, setInverse] = useState(false);\n\n  const handleDateJoinedHeaderClick = useCallback(() => {\n    setInverse(!inverse);\n    toggleDateJoinedOrder();\n  }, [inverse, toggleDateJoinedOrder]);\n\n  return (\n    <table className=\"table table-hover\">\n      <thead className=\"table-light\">\n        <tr>\n          <th scope=\"col\">Full Name</th>\n          <th\n            className=\"d-flex justify-content-end align-items-center\"\n            scope=\"col\"\n            onClick={handleDateJoinedHeaderClick}\n          >\n            Date Joined <ChevronDownIcon inverse={inverse} />\n          </th>\n          <th scope=\"col\" style={{ textAlign: 'right' }}>\n            Salary\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {employees.map(({ employeeId, dateJoined, fullName, salary }) => {\n          return (\n            <tr key={employeeId}>\n              <th scope=\"row\">{fullName}</th>\n              <td className=\"text-right\">{formatDate(dateJoined)}</td>\n              <td className=\"text-right\">{formatCurrency(salary)}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n","import React from 'react';\nimport styles from './EmployeeTally.module.scss';\n\ninterface EmployeeTallyProps {\n  tally?: number;\n}\n\nfunction PersonIcon() {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      className={styles.icon}\n      viewBox=\"0 0 16 16\"\n    >\n      <path d=\"M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z\" />\n    </svg>\n  );\n}\n\nexport default function EmployeeTally({ tally = 0 }: EmployeeTallyProps) {\n  return (\n    <div className=\"employee-tally d-flex justify-content-center justify-content-sm-start align-items-center\">\n      <PersonIcon />\n      <span className={styles.tally}>{tally}</span>\n    </div>\n  );\n}\n","import { parse } from 'date-fns';\nimport _employees from './_employees.json';\n\nconst EMPLOYEE_JOIN_DATE_FORMAT =\n  \"EEE MMM dd yyyy HH:mm:ss 'GMT'XXXX '(Malaysia Time)'\";\n\nconst EmployeeService = {\n  getEmployees: () => {\n    return _employees.map((employee) => {\n      const { dateJoined, employeeId, firstname, lastname, salary } = employee;\n      return {\n        employeeId,\n        dateJoined: parse(dateJoined, EMPLOYEE_JOIN_DATE_FORMAT, Date.now()),\n        fullName: `${firstname}, ${lastname}`,\n        salary,\n      };\n    });\n  },\n};\n\nexport default EmployeeService;\n","import EmployeeAnalyses from 'components/EmployeeAnalyses';\nimport EmployeeTable from 'components/EmployeeTable';\nimport EmployeeTally from 'components/EmployeeTally';\nimport {\n  getHighestEarningEmployee,\n  getMostRecentlyJoinedEmployee,\n} from 'helpers/employeeHelper';\nimport { orderBy } from 'lodash';\nimport React, { useCallback, useState } from 'react';\nimport EmployeeService from 'services/employeeService';\n\nconst ASC = 'asc';\nconst DESC = 'desc';\n\nfunction App() {\n  const [employees] = useState<Employee[]>(EmployeeService.getEmployees());\n  const [dateJoinedOrder, setDateJoinedOrder] = useState<'asc' | 'desc'>(DESC);\n\n  const toggleDateJoinedOrder = useCallback(() => {\n    setDateJoinedOrder(dateJoinedOrder === ASC ? DESC : ASC);\n  }, [dateJoinedOrder]);\n\n  return (\n    <div className=\"employee-dashboard container\">\n      <div className=\"row align-items-center py-3\">\n        <div className=\"col-12 col-sm-4 col-md-2\">\n          <EmployeeTally tally={employees.length} />\n        </div>\n        <div className=\"col-12 col-sm-8 col-md-10\">\n          <EmployeeAnalyses\n            analyses={{\n              'Highest earning employee': getHighestEarningEmployee(employees),\n              'Employee most recently joined': getMostRecentlyJoinedEmployee(\n                employees\n              ),\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <EmployeeTable\n            employees={orderBy(employees, ['dateJoined'], [dateJoinedOrder])}\n            toggleDateJoinedOrder={toggleDateJoinedOrder}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"EmployeeTally_icon__15Cxb\",\"tally\":\"EmployeeTally_tally__2IgLn\"};"],"sourceRoot":""}